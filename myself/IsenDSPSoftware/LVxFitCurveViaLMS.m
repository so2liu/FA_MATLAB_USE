function LVxFitCurveViaLMS(cTest,xTest,NoiseAmp,Mu0,UseWts,NoIts) 
% function LVxFitCurveViaLMS(cTest,xTest,NoiseAmp,Mu0,UseWts,NoIts)
% cTest is a row vector of coefficients for a polynomial in xTest, with
% the first element in cTest being the coefficient for xTest to the zeroth
% power, the second element of cTest is the coefficient for xTest to the first
% power, and so forth; 
% NoiseAmp is the amplitude of noise to add to the points((xTest[n],yTest[n]) 
% which are generated by the polynomial expression using the coefficieents
% of cTest; 
% Mu0 is the initial value of Mu to use in the LMS algorithm;
% UseWts if passed as 1 applies weights to the coefficient update equations
% to speed convergence of the lower power coefficients; pass as 0 to not
% apply any such weights
% NoIts is the maximum number of iterations to perform.
% The script computes the MSE at each iteration, and if it increases, the coeffient
% estimates are rolled back and the value of Mu is halved. The brings Mu to an acceptable
% value if it is chosen too large. In order to standardize the values of MuO, the initial value of Mu0
% is divided by the effective power of xTest "in the filter." Additionally, the update equation for each 
% coefficient is effectively weighted by a factor to cause all coefficients to converge at roughly the same 
% rate. The factor is computed as the xTest power for the highest power being modeled divided by the 
% xTest power for the power whose coefficient is being updated.
%
% Typical calls might be:
%
% LVxFitCurveViaLMS([1 1 2],[-5:1:5],0,0.5,1,31)
% LVxFitCurveViaLMS([1 1 2],[-5:1:5],0,0.5,0,950)
% LVxFitCurveViaLMS([0 1 0 2],[-5:1:5],0,0.5,1,85)
% LVxFitCurveViaLMS([1 1 2],[-1:0.025:1],0,2.75,1,18)
% LVxFitCurveViaLMS([1 1 -2],[-1:0.025:1],0,4,1,26)
% LVxFitCurveViaLMS([1 1 -2],[-1:0.025:1],0,1,0,50)
% 
% Author: F. W. Isen
% Copyright 2009 by Morgan & Claypool

cEst = [];
theMSE = [];
HighestPower = [];
MCtr = [];

n = length(cTest);
while cTest(n) == 0
   n = n-1;
if n==0
   return
end
end
if n==0
       Comment = 'No non-zero coefficients specified for creating test points; ending'
   return
end
HighestPower = n-1

n = 1;
while cTest(n) == 0
   n = n+1;
end
LowestPower = n-1

figure(589)
clf

theMSE = zeros(1,NoIts);
Mu = zeros(1,NoIts);

yTest = 0;
for PwrCtr = 0:1:HighestPower
   yTest = yTest + cTest(PwrCtr+1)*(xTest.^PwrCtr);
end

LenxTest = length(xTest);
yTest = yTest + NoiseAmp*randn(1,length(yTest));
LenxTest = length(xTest);

PwrxVec = 0;
for PwrCtr = 0:1:HighestPower
    PartDerPwr(1,PwrCtr+1) = sum(xTest.^(2*PwrCtr));
   PwrxVec = PwrxVec + PartDerPwr(1,PwrCtr+1);
end
PwrxVec = sum(PwrxVec);
Mu(1) = Mu0/PwrxVec;

n = 1:1:HighestPower + 1;
if UseWts==1
MuPwrWts(1,n) = PartDerPwr(1,length(PartDerPwr))./PartDerPwr;
else
MuPwrWts(1,n) = 1;
end

cEst = zeros(HighestPower+1,NoIts);

for MCtr = 1:1:NoIts %===================start the loop=======================================
yEst = 0;
for PwrCtr = 0:1:HighestPower
  yEst = yEst + cEst(PwrCtr+1,MCtr)*(xTest.^PwrCtr);
end
for PwrCtr = 0:1:HighestPower
    PrtDeriv = sum((yTest - yEst).*(xTest.^PwrCtr));
   cEst(PwrCtr+1,MCtr+1) = cEst(PwrCtr+1,MCtr) + 2*Mu(MCtr)*MuPwrWts(1,PwrCtr+1)*PrtDeriv;  
end
theMSE(MCtr) = (1/LenxTest)*sum((yTest - yEst).^2);
% detect if MSE has increased, if so, rollback coefficients and decrease Mu
if MCtr>1
MSEGainRatio =  theMSE(MCtr)/theMSE(MCtr-1);

if MSEGainRatio > 1
    for PwrCtr = 0:1:HighestPower
      cEst(PwrCtr+1,MCtr+1) = cEst(PwrCtr+1,MCtr); % coefficient rollback  
    end  
    Mu(MCtr+1) = Mu(MCtr)*0.5;   % reduce Mu radically
else
     Mu(MCtr+1) = Mu(MCtr)*1;  % alternate
%     Mu(MCtr+1) = Mu(MCtr)*1.025;  % alternate
end

else 
    Mu(MCtr+1) = Mu(MCtr);
end
%=================================================================
figure(589)
subplot(211)
thisplotlim = 1.5*max(abs(yTest));
plot(xTest,yEst,'r')
grid on
ylabel(['Amplitude (y)'])
xlabel(['(a) Solid = Estimated Curve; Dots = The Test Points Being Modeled (X-Axis = x)'])
axis([min(xTest) max(xTest)  -thisplotlim  thisplotlim])

subplot(212)
stem(20*log10(theMSE(1,1:MCtr)),'bo');
%grid on
xlabel(['(b) Iteration Number = ',num2str(MCtr)])
ylabel(['MSE, dB'])
axis( [0  NoIts  -120  80] )

pause(0.001)
end

figure(589)

subplot(211)
thisplotlim = 1.5*max(abs(yTest));
hold on
plot(xTest,yTest,'bo');
plot(xTest,yEst,'r')
grid on
ylabel(['Amplitude (y)'])
xlabel(['(a) Solid = Estimated Curve; Dots = The Test Points Being Modeled (X-Axis = x)'])
axis([min(xTest) max(xTest)  -thisplotlim  thisplotlim])

theMCtr = MCtr;
finalMSEdB = 20*log10(theMSE(MCtr))

for PwrCtr = 0:1:HighestPower
   PowEstCoeff = ['Final Coefficient for Power ',num2str(PwrCtr),' = ',num2str(cEst(PwrCtr+1,MCtr))]
end

figure(570)
clf

subplot(221)
if HighestPower > 2   
a =  abs(cEst(HighestPower-2,1:MCtr));
plotlim4 = 1.2*max( [a  1 ] );
    if NoIts < 100
        stem(cEst(HighestPower-2,1:MCtr),'bo');
    else
        plot(cEst(HighestPower-2,1:MCtr),'b')
    end
xlabel(['(a) Sample'])
ylabel(['Coeff (Power ',num2str(HighestPower-3),')'])
axis([0 theMCtr -plotlim4  plotlim4])
else
plotlim4 = 1.2*max(abs(Mu));
    if theMCtr < 100
        stem(Mu,'bo');
    else
        plot(Mu,'b')
    end
xlabel(['(a) Sample'])
ylabel(['Mu'])
axis([0 theMCtr -plotlim4  plotlim4])
end

subplot(223)
if HighestPower>1
plotlim3 = 1.2*max([ abs(cEst(HighestPower-1,1:MCtr))  1 ] );
if theMCtr < 100
stem(cEst(HighestPower-1,1:MCtr),'bo');
else
plot(cEst(HighestPower-1,1:MCtr),'b')    
end
xlabel(['(c) Sample'])
axis([0 theMCtr -plotlim3  plotlim3])
else
   clg
   xlabel(['(c) (Not Used)'])
end
ylabel(['Coeff (Power ',num2str(HighestPower-2),')'])

subplot(222)
if HighestPower > 0
plotlim2 = 1.2*max([abs(cEst(HighestPower,1:MCtr))  1 ] );
if theMCtr < 100
stem(cEst(HighestPower,1:MCtr),'bo');
else
plot(cEst(HighestPower,1:MCtr),'b')    
end
xlabel(['(b)  Sample'])
axis([0 theMCtr -plotlim2  plotlim2])
else
   xlabel(['(b) (Not Used)'])
end
ylabel(['Coeff (Power ',num2str(HighestPower-1),')'])
plotlim1 = 1.2*max( [ abs(cEst(HighestPower+1,1:MCtr)) 1 ] );

subplot(224)
if theMCtr < 100
stem(cEst(HighestPower+1,1:MCtr),'bo');
else
plot(cEst(HighestPower+1,1:MCtr),'b')    
end
ylabel(['Coeff (Power ',num2str(HighestPower),')'])
xlabel(['(d) Sample'])
axis([0 theMCtr -plotlim1  plotlim1])

% 3-D plots
%if HighestPower>1
figure(682)
stem3(cEst(HighestPower+1,1:MCtr),cEst(LowestPower+1,1:MCtr),(theMSE(1,1:MCtr)))
xlabel(['Coefficent for Power ',num2str(HighestPower)])
ylabel(['Coefficent for Power ',num2str(LowestPower)])
zlabel(['MSE'])
%end




